<fluent:RibbonWindow x:Class="DayzServerTools.Windows.MainWindow" 
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:s="clr-namespace:System;assembly=mscorlib"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                     xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
                     xmlns:fluent="urn:fluent-ribbon"
                     xmlns:viewmodels="clr-namespace:DayzServerTools.Application.ViewModels;assembly=DayzServerTools.Application"
                     xmlns:dockView="clr-namespace:DayzServerTools.Windows.Views.Dock"
                     xmlns:views="clr-namespace:DayzServerTools.Windows.Views" xmlns:controls="clr-namespace:DayzServerTools.Windows.Controls"
                     mc:Ignorable="d"
                     Title="DayzServerTools"
                     WindowState="Maximized"
                     d:Height="800" d:Width="1200">
    <Window.Resources>
        <Style TargetType="fluent:Button">
            <Setter Property="IsEnabled" Value="True"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Command}"
                             Value="{x:Null}">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ScaleButton" TargetType="Button">
            <Setter Property="Height" Value="32"/>
            <Setter Property="Width" Value="32"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style>
        <Style x:Key="RibbonComboBox" TargetType="fluent:ComboBox">
            <Setter Property="IsEnabled" Value="True"/>
            <Setter Property="MinWidth" Value="120"/>
            <Setter Property="MinHeight" Value="32"/>
            <Setter Property="Margin" Value="0 16"/>
            <Setter Property="FontSize" Value="14"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ItemsSource.Count}"
                             Value="0">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <DataTemplate DataType="{x:Type viewmodels:ItemTypesViewModel}">
            <views:ItemTypesView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:UserDefinitionsViewModel}">
            <views:UserDefinitionsView/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:TraderConfigViewModel}">
            <views:TraderConfigView/>
        </DataTemplate>
        <xcad:BoolToVisibilityConverter x:Key="AvalonBoolToVisibilityConverter" />
        <s:Single x:Key="x025">0.25</s:Single>
        <s:Single x:Key="x05">0.5</s:Single>
        <s:Single x:Key="x2">2.0</s:Single>
        <s:Single x:Key="x3">3.0</s:Single>
        <s:Single x:Key="x4">4.0</s:Single>
    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Gesture="CTRL+N" Command="{Binding NewTabCommand}" CommandParameter="{x:Static viewmodels:NewTabOptions.NewTypes}"/>
        <KeyBinding Gesture="CTRL+O" Command="{Binding NewTabCommand}" CommandParameter="{x:Static viewmodels:NewTabOptions.OpenTypes}"/>
        <KeyBinding Gesture="CTRL+S" Command="{Binding Path=ActiveFile.SaveCommand}"/>
        <KeyBinding Gesture="CTRL+SHIFT+S" Command="{Binding Path=ActiveFile.SaveAsCommand}"/>
    </Window.InputBindings>
    <DockPanel LastChildFill="True">
        <fluent:Ribbon DockPanel.Dock="Top">
            <fluent:Ribbon.QuickAccessItems>
                <fluent:QuickAccessMenuItem Target="{Binding ElementName=newTypesButton}" 
                                            IsChecked="True"/>
                <fluent:QuickAccessMenuItem Target="{Binding ElementName=saveButton}"
                                            IsChecked="True"/>
                <fluent:QuickAccessMenuItem Target="{Binding ElementName=saveAsButton}"
                                            IsChecked="False"/>
                <fluent:QuickAccessMenuItem Target="{Binding ElementName=saveAllButton}"
                                            IsChecked="True"/>
            </fluent:Ribbon.QuickAccessItems>
            <fluent:Ribbon.Menu>
                <fluent:Backstage>
                    <fluent:BackstageTabControl>
                        <fluent:BackstageTabItem Header="New"  Icon="{StaticResource NewIcon}">
                            <WrapPanel Margin="16">
                                <fluent:Button Header="New types.xml" x:Name="newTypesButton"
                                               Icon="{StaticResource NewItemTypesVecIcon}"
                                               Command="{Binding NewTabCommand}" 
                                               CommandParameter="{x:Static viewmodels:NewTabOptions.NewTypes}" />
                                <fluent:Button Header="New User Flags" Icon="{StaticResource NewFlagsVecIcon}"
                                               Command="{Binding NewTabCommand}" 
                                               CommandParameter="{x:Static viewmodels:NewTabOptions.NewUserDefinitions}"/>
                            </WrapPanel>
                        </fluent:BackstageTabItem>
                        <fluent:BackstageTabItem Header="Open" Icon="{StaticResource OpenIcon}">
                            <WrapPanel Margin="16">
                                <fluent:Button Header="Open types.xml" Icon="{StaticResource OpenItemTypesVecIcon}"
                                               Command="{Binding NewTabCommand}"
                                               CommandParameter="{x:Static viewmodels:NewTabOptions.OpenTypes}"/>
                                <fluent:Button Header="Open User Flags" Icon="{StaticResource OpenFlagsVecIcon}"
                                               Command="{Binding NewTabCommand}" 
                                               CommandParameter="{x:Static viewmodels:NewTabOptions.OpenUserDefinitions}"/>
                                <fluent:Button Header="Open Trader Config" Icon="{StaticResource OpenTraderConfigVecIcon}"
                                               Command="{Binding NewTabCommand}" 
                                               CommandParameter="{x:Static viewmodels:NewTabOptions.OpenTraderConfig}"/>
                            </WrapPanel>
                        </fluent:BackstageTabItem>
                        <fluent:SeparatorTabItem/>
                        <fluent:Button Header="Save" x:Name="saveButton"
                                       Icon="{StaticResource SaveIcon}"
                                       Command="{Binding Path=ActiveFile.SaveCommand}"/>
                        <fluent:Button Header="Save As" x:Name="saveAsButton"
                                       Icon="{StaticResource SaveAsIcon}"
                                       Command="{Binding Path=ActiveFile.SaveAsCommand}"/>
                        <fluent:Button Header="Save All" x:Name="saveAllButton"
                                       Icon="{StaticResource SaveAllIcon}"
                                       Command="{Binding Path=ActiveFile.SaveAllCommand}"/>
                    </fluent:BackstageTabControl>
                </fluent:Backstage>
            </fluent:Ribbon.Menu>
            <fluent:Ribbon.ContextualGroups>
                <fluent:RibbonContextualTabGroup Header="User Definitions"
                                                 Background="OrangeRed"
                                                 BorderBrush="OrangeRed"
                                                 x:Name="UserDefinitionsToolsGroup"
                                                 Visibility="{Binding ActiveFileIsUserDefinitions, Converter={StaticResource AvalonBoolToVisibilityConverter}, Mode=OneWay}" />
                <fluent:RibbonContextualTabGroup Header="Types"
                                                 Background="Orange"
                                                 BorderBrush="Orange"
                                                 x:Name="ItemTypesToolsGroup"
                                                 Visibility="{Binding ActiveFileIsItemTypes, Converter={StaticResource AvalonBoolToVisibilityConverter}, Mode=OneWay}" />
                <fluent:RibbonContextualTabGroup Header="Trader"
                                                 Background="Gold"
                                                 BorderBrush="Gold"
                                                 x:Name="TraderConfigToolsGroup"
                                                 Visibility="{Binding ActiveFileIsTraderConfig, Converter={StaticResource AvalonBoolToVisibilityConverter}, Mode=OneWay}" />
            </fluent:Ribbon.ContextualGroups>
            <fluent:RibbonTabItem Header="Workspace">
                <fluent:RibbonGroupBox Header="Limits Definitions" MinWidth="100"
                                       HorizontalContentAlignment="Center">
                    <Ellipse StrokeThickness="0" Width="16" Height="16" Margin="0 16 16 0">
                        <Ellipse.Style>
                            <Style TargetType="Ellipse">
                                <Setter Property="Fill" Value="Red"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding LimitsDefinitionsLoaded, Mode=OneWay}" Value="true">
                                        <Setter Property="Fill" Value="DarkGreen"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Ellipse.Style>
                    </Ellipse>
                    <fluent:Button Header="Load" Command="{Binding LoadLimitsDefinitionsCommand}" Size="Large"
                                   Icon="{StaticResource OpenVecIcon}"/>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="User Limits Definitions">
                    <Ellipse StrokeThickness="0" Width="16" Height="16" Margin="0 16 16 0" 
                             VerticalAlignment="Center">
                        <Ellipse.Style>
                            <Style TargetType="Ellipse">
                                <Setter Property="Fill" Value="Red"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding UserDefinitionsLoaded, Mode=OneWay}" Value="true">
                                        <Setter Property="Fill" Value="DarkGreen"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Ellipse.Style>
                    </Ellipse>
                    <fluent:Button Header="Load" Command="{Binding LoadUserDefinitionsCommand}" Size="Large"
                                   Icon="{StaticResource OpenVecIcon}"/>
                    <fluent:Button Header="Create New" Icon="{StaticResource NewFlagsVecIcon}"
                                   Command="{Binding NewTabCommand}" 
                                   CommandParameter="{x:Static viewmodels:NewTabOptions.NewUserDefinitions}"/>
                    <fluent:Button Header="Open Edit" Icon="{StaticResource EditFlagsVecIcon}"
                                   Command="{Binding NewTabCommand}" 
                                   CommandParameter="{x:Static viewmodels:NewTabOptions.OpenUserDefinitions}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Types">
                    <fluent:Button Header="New types.xml" Icon="{StaticResource NewItemTypesVecIcon}"
                                   Command="{Binding NewTabCommand}" 
                                   CommandParameter="{x:Static viewmodels:NewTabOptions.NewTypes}" />
                    <fluent:Button Header="Open types.xml" Icon="{StaticResource OpenItemTypesVecIcon}"
                                   Command="{Binding NewTabCommand}"
                                   CommandParameter="{x:Static viewmodels:NewTabOptions.OpenTypes}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Trader Config">
                    <fluent:Button Header="Open Trader Config" Icon="{StaticResource OpenTraderConfigVecIcon}"
                                   Command="{Binding NewTabCommand}" 
                                   CommandParameter="{x:Static viewmodels:NewTabOptions.OpenTraderConfig}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <fluent:RibbonTabItem Header="View">
                <fluent:RibbonGroupBox Header="Errors">
                    <fluent:ToggleButton Header="Validation Errors" Size="Large"
                                         Icon="{StaticResource ErrorListVecIcon}" 
                                         LargeIcon="{StaticResource ErrorListVecIcon}" 
                                         IsChecked="{Binding ErrorsPaneViewModel.IsVisible}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <!-- User Definitions Tools Group -->
            <fluent:RibbonTabItem Header="User Definitions Tools" Group="{Binding ElementName=UserDefinitionsToolsGroup}"
                                  Visibility="{Binding ActiveFileIsUserDefinitions, Converter={StaticResource AvalonBoolToVisibilityConverter}, Mode=OneWay}">
                <fluent:RibbonGroupBox Header="Value Flags" MinWidth="100"
                                       HorizontalContentAlignment="Center">
                    <fluent:Button Header="Add" Icon="{StaticResource AddValueFlagVecIcon}"
                                   Command="{Binding ActiveFile.NewValueFlagCommand}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Usage Flags" MinWidth="100"
                                       HorizontalContentAlignment="Center">
                    <fluent:Button Header="Add" Icon="{StaticResource AddUsageFlagVecIcon}"
                                   Command="{Binding ActiveFile.NewUsageFlagCommand}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Validation" MinWidth="80"
                                       HorizontalContentAlignment="Center">
                    <fluent:Button Header="Validate" Icon="{StaticResource ValidateVecIcon}"
                                   Command="{Binding ActiveFile.ValidateCommand}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <!-- Item Types Tools Group -->
            <!-- Item Types General -->
            <fluent:RibbonTabItem Header="General" Group="{Binding ElementName=ItemTypesToolsGroup}"
                                  Visibility="{Binding ActiveFileIsItemTypes, Converter={StaticResource AvalonBoolToVisibilityConverter}, Mode=OneWay}">
                <fluent:RibbonGroupBox Header="Edit">
                    <fluent:Button Header="Add New Item" Icon="{StaticResource AddVecIcon}"
                                   Command="{Binding ActiveFile.AddEmptyItemCommand}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Export">
                    <fluent:Button Header="To New types.xml" Icon="{StaticResource NewItemTypesVecIcon}"
                                   Command="{Binding ActiveFile.ExportToNewFileCommand}"
                                   CommandParameter="{Binding ActiveFile.SelectedItems}"/>
                    <fluent:Button Header="To Trader Config" Icon="{StaticResource ExportTraderVecIcon}"
                                   Command="{Binding ActiveFile.ExportToTraderCommand}"
                                   CommandParameter="{Binding ActiveFile.SelectedItems}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Validation" MinWidth="80"
                                       HorizontalContentAlignment="Center">
                    <fluent:Button Header="Validate" Icon="{StaticResource ValidateVecIcon}"
                                   Command="{Binding ActiveFile.ValidateCommand}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <!-- Item Types Batch Edit -->
            <fluent:RibbonTabItem Header="Batch Edit" Group="{Binding ElementName=ItemTypesToolsGroup}"
                                  Visibility="{Binding ActiveFileIsItemTypes, Converter={StaticResource AvalonBoolToVisibilityConverter}, Mode=OneWay}">
                <fluent:RibbonGroupBox Header="Quantity">
                    <Button Content="×½" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustQuantityCommand}"
                            CommandParameter="{StaticResource x05}"/>
                    <Button Content="×3" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustQuantityCommand}"
                            CommandParameter="{StaticResource x3}"/>
                    <Button Content="×2" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustQuantityCommand}"
                            CommandParameter="{StaticResource x2}"/>
                    <Button Content="×4" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustQuantityCommand}"
                            CommandParameter="{StaticResource x4}"/>
                    <controls:PercentageChangeControl MinValue="0" MaxValue="4" Width="150"
                                                      Percentage="{Binding ActiveFile.QuantityPercentage, Mode=TwoWay}"/>
                    <fluent:Button Header="Modify" Icon="{StaticResource EditVecIcon}"
                                   Command="{Binding ActiveFile.AdjustQuantityCommand}" 
                                   CommandParameter="{x:Null}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Restock">
                    <Button Content="×¼" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustRestockCommand}"
                            CommandParameter="{StaticResource x025}"/>
                    <Button Content="×½" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustRestockCommand}"
                            CommandParameter="{StaticResource x05}"/>
                    <controls:PercentageChangeControl MinValue="0.05" MaxValue="2" Width="150"
                                                      Percentage="{Binding ActiveFile.RestockPercentage, Mode=TwoWay}"/>
                    <fluent:Button Header="Modify" Icon="{StaticResource EditVecIcon}"
                                   Command="{Binding ActiveFile.AdjustRestockCommand}" 
                                   CommandParameter="{x:Null}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Lifetime">
                    <Button Content="×¼" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustLifetimeCommand}"
                            CommandParameter="{StaticResource x025}"/>
                    <Button Content="×2" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustLifetimeCommand}"
                            CommandParameter="{StaticResource x2}"/>
                    <Button Content="×½" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustLifetimeCommand}"
                            CommandParameter="{StaticResource x05}"/>
                    <Button Content="×4" Style="{StaticResource ScaleButton}"
                            Command="{Binding ActiveFile.AdjustLifetimeCommand}"
                            CommandParameter="{StaticResource x4}"/>
                    <controls:PercentageChangeControl MinValue="0.05" MaxValue="2" Width="150"
                                                      Percentage="{Binding ActiveFile.LifetimePercentage, Mode=TwoWay}"/>
                    <fluent:Button Header="Modify" Icon="{StaticResource EditVecIcon}"
                                   Command="{Binding ActiveFile.AdjustLifetimeCommand}" 
                                   CommandParameter="{x:Null}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Category">
                    <fluent:ComboBox x:Name="setCategoryComboBox" ItemsSource="{Binding Categories}" 
                                     IsEditable="False"  SelectedIndex="0" IsSynchronizedWithCurrentItem="True"
                                     Style="{StaticResource RibbonComboBox}"
                                     ItemTemplate="{StaticResource VanillaFlagTemplate}"/>
                    <fluent:Button Header="Set" Icon="{StaticResource EditVecIcon}"
                                   Command="{Binding ActiveFile.SetCategoryCommand}" 
                                   CommandParameter="{Binding ElementName=setCategoryComboBox, Path=SelectedItem}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Value Flags">
                    <fluent:Button Header="Clear" Icon="{StaticResource ClearVecIcon}"
                                   Command="{Binding ActiveFile.ClearFlagsCommand}" 
                                   CommandParameter="{x:Static viewmodels:ClearTarget.ValueFlags}"/>
                    <fluent:ComboBox x:Name="newValueFlagComboBox" ItemsSource="{Binding Values}" 
                                     IsEditable="False"  SelectedIndex="0" IsSynchronizedWithCurrentItem="True"
                                     Style="{StaticResource RibbonComboBox}"
                                     ItemTemplate="{StaticResource VanillaFlagTemplate}"/>
                    <fluent:Button Header="Add" Icon="{StaticResource AddVecIcon}"
                                   Command="{Binding ActiveFile.AddValueFlagCommand}" 
                                   CommandParameter="{Binding ElementName=newValueFlagComboBox, Path=SelectedItem}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Usage Flags">
                    <fluent:Button Header="Clear" Icon="{StaticResource ClearVecIcon}"
                                   Command="{Binding ActiveFile.ClearFlagsCommand}" 
                                   CommandParameter="{x:Static viewmodels:ClearTarget.UsageFlags}"/>
                    <fluent:ComboBox x:Name="newUsageFlagComboBox" ItemsSource="{Binding Usages}" 
                                     IsEditable="False"  SelectedIndex="0" IsSynchronizedWithCurrentItem="True"
                                     Style="{StaticResource RibbonComboBox}"
                                     ItemTemplate="{StaticResource VanillaFlagTemplate}"/>
                    <fluent:Button Header="Add" Icon="{StaticResource AddVecIcon}"
                                   Command="{Binding ActiveFile.AddUsageFlagCommand}" 
                                   CommandParameter="{Binding ElementName=newUsageFlagComboBox, Path=SelectedItem}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Tags">
                    <fluent:Button Header="Clear" Icon="{StaticResource ClearVecIcon}"
                                   Command="{Binding ActiveFile.ClearFlagsCommand}" 
                                   CommandParameter="{x:Static viewmodels:ClearTarget.Tags}"/>
                    <fluent:ComboBox x:Name="newTagComboBox" ItemsSource="{Binding Tags}" 
                                     IsEditable="False"  SelectedIndex="0" IsSynchronizedWithCurrentItem="True"
                                     Style="{StaticResource RibbonComboBox}"
                                     ItemTemplate="{StaticResource VanillaFlagTemplate}"/>
                    <fluent:Button Header="Add" Icon="{StaticResource AddVecIcon}"
                                   Command="{Binding ActiveFile.AddTagCommand}" 
                                   CommandParameter="{Binding ElementName=newTagComboBox, Path=SelectedItem}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <!-- Trader Tools Tools Group -->
            <fluent:RibbonTabItem Header="Trader Tools" Group="{Binding ElementName=TraderConfigToolsGroup}"
                                  Visibility="{Binding ActiveFileIsTraderConfig, Converter={StaticResource AvalonBoolToVisibilityConverter}, Mode=OneWay}">
                <fluent:RibbonGroupBox Header="Category">
                    <RibbonTextBox x:Name="newTraderCategoryTextBox" Label="New:"
                                   Background="LightGray"
                                   Padding="2" Margin="4"
                                   Command="{Binding ActiveFile.SelectedTrader.AddCategoryCommand}"
                                   CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Text}"/>
                    <fluent:Button Header="Add" Icon="{StaticResource AddVecIcon}"
                                   Command="{Binding ActiveFile.SelectedTrader.AddCategoryCommand}"
                                   CommandParameter="{Binding ElementName=newTraderCategoryTextBox, Path=Text}"/>
                    <fluent:Button Header="Remove" Icon="{StaticResource RemoveVecIcon}"
                                   Command="{Binding ActiveFile.SelectedTrader.RemoveCategoryCommand}"
                                   CommandParameter="{x:Null}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Items Quantity">
                    <fluent:ComboBox x:Name="quantityModifierComboBox" Header="Quantity" 
                                     ItemsSource="{Binding ActiveFile.AvailableModifiers}"
                                     IsEditable="False" InputWidth="48"/>
                    <fluent:Button Header="Set Quantity" Icon="{StaticResource EditVecIcon}" Size="Middle"
                                   Command="{Binding ActiveFile.SelectedTrader.SelectedCategory.SetQuantityModifierCommand}"
                                   CommandParameter="{Binding ElementName=quantityModifierComboBox, Path=SelectedItem}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Items Price">

                    <fluent:Button Header="Prohibit Buying" Icon="{StaticResource StatusNoVecIcon}"
                                   Command="{Binding ActiveFile.SelectedTrader.SelectedCategory.ProhibitBuyingCommand}"/>
                    <fluent:Button Header="Set Buy Price" Icon="{StaticResource EditVecIcon}"
                                   Command="{Binding ActiveFile.SelectedTrader.SelectedCategory.SetBuyPriceCommand}"
                                   CommandParameter="{Binding ElementName=buyPriceCategoryTextBox, Path=Text, Converter={StaticResource StringToDoubleConverter}}"/>
                    <RibbonTextBox x:Name="buyPriceCategoryTextBox" Label="Buy Price:"
                                   Padding="2" Margin="4" Text="100"
                                   Command="{Binding ActiveFile.SelectedTrader.SelectedCategory.SetBuyPriceCommand}"
                                   CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Text, Converter={StaticResource StringToDoubleConverter}}"/>
                    <RibbonTextBox x:Name="sellPriceCategoryTextBox" Label="Sell Price:"
                                   Padding="2" Margin="4" Text="100"
                                   Command="{Binding ActiveFile.SelectedTrader.SelectedCategory.SetSellPriceCommand}"
                                   CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Text, Converter={StaticResource StringToDoubleConverter}}"/>
                    <fluent:Button Header="Set Sell Price" Icon="{StaticResource EditVecIcon}"
                                   Command="{Binding ActiveFile.SelectedTrader.SelectedCategory.SetSellPriceCommand}"
                                   CommandParameter="{Binding ElementName=sellPriceCategoryTextBox, Path=Text, Converter={StaticResource StringToDoubleConverter}}"/>
                    <fluent:Button Header="Prohibit Selling" Icon="{StaticResource StatusNoVecIcon}"
                                   Command="{Binding ActiveFile.SelectedTrader.SelectedCategory.ProhibitSellingCommand}"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="Items Export">
                    <fluent:Button Header="Copy to..."
                                   Icon="{StaticResource CopyVecIcon}"
                                   Command="{Binding ActiveFile.SelectedTrader.SelectedCategory.CopyItemsCommand}"/>
                    <fluent:Button Header="Move..."
                                   Icon="{StaticResource ExportVecIcon}"
                                   Command="{Binding ActiveFile.SelectedTrader.SelectedCategory.MoveItemsCommand}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
        </fluent:Ribbon>
        <xcad:DockingManager AllowMixedOrientation="True"
                             DocumentsSource="{Binding Tabs}"
                             AnchorablesSource="{Binding Panes}"
                             ActiveContent="{Binding ActivePane, Mode=TwoWay}">
            <xcad:DockingManager.Theme>
                <xcad:GenericTheme/>
            </xcad:DockingManager.Theme>

            <xcad:DockingManager.LayoutItemContainerStyleSelector>
                <dockView:PanesStyleSelector>
                    <dockView:PanesStyleSelector.PaneStyle>
                        <Style TargetType="{x:Type xcad:LayoutAnchorableItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}"/>
                            <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource AvalonBoolToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"/>
                            <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
                        </Style>
                    </dockView:PanesStyleSelector.PaneStyle>
                    <dockView:PanesStyleSelector.DocumentStyle>
                        <Style TargetType="{x:Type xcad:LayoutItem}">
                            <Setter Property="Title" Value="{Binding Model.Name}"/>
                            <Setter Property="ToolTip" Value="{Binding Model.FileName}"/>
                            <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}"/>
                        </Style>
                    </dockView:PanesStyleSelector.DocumentStyle>
                </dockView:PanesStyleSelector>
            </xcad:DockingManager.LayoutItemContainerStyleSelector>

            <xcad:DockingManager.LayoutUpdateStrategy>
                <dockView:LayoutInitializer />
            </xcad:DockingManager.LayoutUpdateStrategy>

            <xcad:LayoutRoot>
                <xcad:LayoutPanel Orientation="Horizontal">
                    <xcad:LayoutPanel Orientation="Vertical">
                        <xcad:LayoutDocumentPane/>
                        <xcad:LayoutAnchorablePane Name="ErrorsPane" DockHeight="200" />
                    </xcad:LayoutPanel>
                </xcad:LayoutPanel>
            </xcad:LayoutRoot>

        </xcad:DockingManager>
    </DockPanel>
</fluent:RibbonWindow>
